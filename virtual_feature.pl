# Defines functions for this feature

do '../web-lib.pl';
&init_config();
do '../ui-lib.pl';
&foreign_require("htaccess-htpasswd", "htaccess-lib.pl");
$input_name = $module_name;
$input_name =~ s/[^A-Za-z0-9]/_/g;

# feature_name()
# Returns a short name for this feature
sub feature_name
{
return $text{'feat_name'};
}

# feature_check()
# Returns undef if all the needed programs for this feature are installed,
# or an error message if not
sub feature_check
{
return &foreign_installed("htaccess-htpasswd", 1) ? undef :
	$text{'feat_edep'};
}

# mailbox_inputs(&user, new, &domain)
# If any protected directories are defined, returns a list of them for selection
sub mailbox_inputs
{
local ($user, $new, $dom) = @_;

# Find protected directories
local @dirs = &htaccess_htpasswd::list_directories();
@dirs = grep { &htaccess_htpasswd::can_access_dir($_->[0]) } @dirs;
return undef if (!@dirs);

# Work out which ones this user has access to
local @indir;
if (!$new) {
	local %indir = &get_in_dirs(\@dirs, $user->{'user'});
	@indir = keys %indir;
	}
else {
	local $lref = &read_file_lines(
		"$module_config_directory/defaults.$dom->{'id'}");
	@indir = @$lref;
	}

local $main::ui_table_cols = 2;
return &ui_table_row(&hlink($text{'user_dirs'}, "dirs"),
	     &ui_select($input_name, \@indir,
		[ map { [ $_->[0], &remove_public_html($_->[0], $dom) ] }
		      @dirs ], 3, 1));
}

sub remove_public_html
{
local ($dir, $dom) = @_;
local $hdir = $dom->{'home'};
$dir =~ s/^\Q$hdir\E\///;
return $dir;
}

# mailbox_validate(&user, &old-user, &in, new, &domain)
# Validates inputs generated by mailbox_inputs, and returns either undef on
# success or an error message
sub mailbox_validate
{
return undef;		# Nothing to do, since any setting is valid
}

# mailbox_save(&user, &old-user, &in, new, &domain)
# Updates the user based on inputs generated by mailbox_inputs
sub mailbox_save
{
local ($user, $old, $in, $new, $dom) = @_;

# Find protected directories
local @dirs = &htaccess_htpasswd::list_directories();
@dirs = grep { &htaccess_htpasswd::can_access_dir($_->[0]) } @dirs;
return undef if (!@dirs);
local %indir = &get_in_dirs(\@dirs, $old->{'user'});
local $count = 0;

# Update them all
local %seldir = map { $_, 1 } split(/\0/, $in->{$input_name});
foreach my $d (@dirs) {
	local $suser = $indir{$d->[0]};
	if ($suser && !$seldir{$d->[0]}) {
		# Take out of this directory
		&htaccess_htpasswd::delete_user($suser);
		}
	elsif (!$suser && $seldir{$d->[0]}) {
		# Add to this directory
		$suser = { 'user' => $user->{'user'},
			   'dom' => $dom->{'dom'},
			   'enabled' => 1 };
		if ($user->{'passmode'} == 3 ||
		    defined($user->{'plainpass'})) {
			$suser->{'pass'} = &htaccess_htpasswd::encrypt_password(
				$user->{'plainpass'}, undef, $d->[2]);
			}
		else {
			$suser->{'pass'} = $user->{'pass'};
			}
		&htaccess_htpasswd::create_user($suser, $d->[1]);
		$count++;
		}
	elsif ($suser && $seldir{$d->[0]}) {
		# Update username and password and domain
		if ($user->{'user'} ne $old->{'user'}) {
			$suser->{'user'} = $user->{'user'};
			}
		if ($user->{'pass'} ne $old->{'pass'}) {
			$suser->{'pass'} = &htaccess_htpasswd::encrypt_password(
				$user->{'plainpass'}, undef, $d->[2]);
			}
		&htaccess_htpasswd::modify_user($suser);
		$count++;
		}
	}
return $count ? 1 : 0;
}

# mailbox_modify(&user, &old-user, &domain)
# Adds or removes the user from protected directories
sub mailbox_modify
{
local ($user, $old, $dom) = @_;

# Find protected directories
local @dirs = &htaccess_htpasswd::list_directories();
@dirs = grep { &htaccess_htpasswd::can_access_dir($_->[0]) } @dirs;
local %indir = &get_in_dirs(\@dirs, $old->{'user'});

# Update the user
foreach my $d (@dirs) {
	local $suser = $indir{$d->[0]};
	if ($suser) {
		if ($user->{'user'} ne $old->{'user'}) {
			$suser->{'user'} = $user->{'user'};
			}
		if ($user->{'pass'} ne $old->{'pass'}) {
			$suser->{'pass'} = &htaccess_htpasswd::encrypt_password(
				$user->{'plainpass'}, undef, $d->[2]);
			}
		&htaccess_htpasswd::modify_user($suser);
		}
	}
}

# mailbox_delete(&user, &domain)
# Removes any extra features for this user
sub mailbox_delete
{
local ($user, $dom) = @_;

# Find protected directories
local @dirs = &htaccess_htpasswd::list_directories();
@dirs = grep { &htaccess_htpasswd::can_access_dir($_->[0]) } @dirs;
local %indir = &get_in_dirs(\@dirs, $user->{'user'});

# Take the user out of them
foreach my $d (@dirs) {
	local $suser = $indir{$d->[0]};
	if ($suser) {
		&htaccess_htpasswd::delete_user($suser);
		}
	}
}

# mailbox_header(&domain)
# Returns a column header for the user display, or undef for none
sub mailbox_header
{
return undef;
}

# mailbox_column(&user, &domain)
# Returns the text to display in the column for some user
sub mailbox_column
{
return undef;
}

# mailbox_defaults_inputs(&defs, &domain)
# Returns HTML for editing defaults for plugin-related settings for new
# users in this virtual server
sub mailbox_defaults_inputs
{
local ($defs, $dom) = @_;
local $lref =&read_file_lines("$module_config_directory/defaults.$dom->{'id'}");
local @dirs = &htaccess_htpasswd::list_directories();
@dirs = grep { &htaccess_htpasswd::can_access_dir($_->[0]) } @dirs;
return undef if (!@dirs);
return &ui_table_row($text{'user_dirs'},
     &ui_select($input_name, $lref,
	[ map { [ $_->[0], &remove_public_html($_->[0], $dom) ] }
	      @dirs ], 3, 1), 3);
}

# mailbox_defaults_parse(&defs, &domain, &in)
# Parses the inputs created by mailbox_defaults_inputs, and updates a config
# file internal to this module to store them
sub mailbox_defaults_parse
{
local ($defs, $dom, $in) = @_;
local $lref =&read_file_lines("$module_config_directory/defaults.$dom->{'id'}");
@$lref = split(/\0/, $in->{$input_name});
&flush_file_lines("$module_config_directory/defaults.$dom->{'id'}");
}

# get_in_dirs(&dirs, username)
# Returns a list of directories some user has access too, as a hash
sub get_in_dirs
{
local ($dirs, $username) = @_;
local %indir;
foreach my $d (@$dirs) {
	local $users = $d->[2] == 3 ?
		&htaccess_htpasswd::list_digest_users($d->[1]) :
		&htaccess_htpasswd::list_users($d->[1]);
	local ($got) = grep { $_->{'user'} eq $username } @$users;
	$indir{$d->[0]} = $got if ($got);
	}
return %indir;
}

1;

